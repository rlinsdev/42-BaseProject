# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: rlins <rlins@student.42.fr>                +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2022/07/28 07:44:14 by rlins             #+#    #+#              #
#    Updated: 2022/07/28 17:50:41 by rlins            ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

# Colors
GREEN = \033[0;32m
RED = \033[0;31m
BLUE = \033[0;34m
RESET = \033[0m

# PATH VARIABLES
INC_PATH = ./include/ #includes / headers
SRC_PATH = ./src/
OBJ_PATH = ./obj/
LIB_PATH = ./lib/
BIN_PATH = ./bin/

# COMPILATION
CC = gcc
FLAGS = -Wall -Wextra -Werror

# BASH COMMANDS
RM = rm -f# Remove Directory - Force
MKDIR = mkdir -p# Make Directory - Make Parents. No error if existing
MAKE_NOPRINT = $(MAKE) --no-print-directory

# FILES
LIBNAME = baseproject.a# Name of static lib
SRC_FILES = float_vector.c \
			mytime.c

SOURCES = $(addprefix $(SRC_PATH), $(SRC_FILES))
OBJ_FILES = $(patsubst %.c, %.o, $(SRC_FILES))
OBJECTS = $(addprefix $(OBJ_PATH), $(OBJ_FILES))
EXECUTABLE = ft_baseproject_test

# TARGETS
all: libft $(LIBNAME)

# Compiles libft
libft:
	@cd $(LIB_PATH)libft && $(MAKE_NOPRINT)

# PrintF??? Acho que nao preciso disso
# -> creates static library libftprintf.a inside ./libs/
$(LIBNAME):
	@echo "$(BLUE)(justAAAA) a minute ⌛...$(RESET)"
	$(OBJECTS)
	@cp $(LIB_PATH)libft.a $(LIB_PATH)$(LIBNAME)
	@ar -rcs $(LIB_PATH)$(LIBNAME) $(OBJECTS)

# PrintF??? Acho que nao preciso disso
# -> creates object files for ft_printf (libftprintf)
$(OBJ_PATH)%.o : $(SRC_PATH)%.c $(HEADERS_PATH)*.h
	@$(MKDIR) $(OBJ_PATH)
	@$(CC) $(FLAGS) -c $< -I $(HEADERS_PATH) -o $@

# -> mandatory flag for project submission
# bonus: all

# RUN
# -> creates the executable file $(EXECUTABLE) to test development
#main:	./main.c
main:	./apps/app.c
	@$(MKDIR) $(BIN_PATH)
	@$(CC) $(CFLAGS) $< $(LIB_PATH)$(LIBNAME) -I $(HEADERS_PATH) -o $(BIN_PATH)$(EXECUTABLE)

test:
	echo @$(BIN_PATH)$(EXECUTABLE)

run:	all main
	@$(BIN_PATH)$(EXECUTABLE)
	@$(MAKE_NOPRINT) fclean

# SANITIZE
# Deletes all .o files; also runs libft's clean target
# OK
clean:
	@echo "\n$(LIBNAME): $(RED)object (*.o) files were deleted ✗$(RESET)"
	@$(RM) $(OBJECTS)
	@cd $(LIB_PATH)libft && $(MAKE_NOPRINT) $@
	@echo

# SANITIZE
# Deletes .o files + static library file + executable; also runs libft's fclean target
fclean: clean
	@echo "$(LIBNAME): $(RED)$(LIBNAME) was deleted ✗$(RESET)"
	@$(RM) $(BIN_PATH)$(EXECUTABLE)
	@$(RM) $(LIB_PATH)$(LIBNAME)
	@cd $(LIB_PATH)libft && $(MAKE_NOPRINT) $@

# Clean an dexecute all
re: fclean all

.PHONY: all run clean fclean re